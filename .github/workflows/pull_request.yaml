on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development
      - 'feature/**'
      - 'bugfix/**'
      - 'task/**'

jobs:
  test:
    name: Run Unit Tests & Generate Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Grant execute permission to Gradle
        run: chmod +x ./gradlew

      - name: Run unit tests
        run: ./gradlew testDebugUnitTest

      - name: Generate coverage report
        run: ./gradlew jacocoTestReport

      - name: Check coverage threshold
        id: coverage
        run: |
          REPORT="${{ github.workspace }}/app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
          
          if [ ! -f "$REPORT" ]; then
            echo "‚ùå Report not found: $REPORT"
            exit 1
          fi
          
          MISSED=$(grep -oP '<counter type="LINE" missed="\K[0-9]+' "$REPORT" | tail -1)
          COVERED=$(grep -oP '<counter type="LINE" covered="\K[0-9]+' "$REPORT" | tail -1)
          
          MISSED=${MISSED:-0}
          COVERED=${COVERED:-0}
          TOTAL=$(( MISSED + COVERED ))
          
          if [ "$TOTAL" -eq 0 ]; then
            PERCENT=0
          else
            PERCENT=$(( 100 * COVERED / TOTAL ))
          fi
          
          echo "percent=$PERCENT" >> $GITHUB_OUTPUT
          
          if [ "$PERCENT" -lt 80 ]; then
            echo "‚ùå Test coverage is below 80% ($PERCENT%)"
            exit 1
          else
            echo "‚úÖ Test coverage is sufficient ($PERCENT%)"
          fi

      - name: Generate coverage table
        id: coverage_table
        if: ${{ always() }}
        run: |
          CSV_REPORT="${{ github.workspace }}/app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.csv"
          
          if [ ! -f "$CSV_REPORT" ]; then
            echo "::warning::Coverage CSV report not found: $CSV_REPORT"
            echo "table=‚ùå Coverage report not generated" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          TABLE_CONTENT=$(awk -F, '
          BEGIN {
            print "| Class | Line Coverage | Branch Coverage |\n|-------|--------------:|----------------:|"
          }
          NR > 1 {
            class_name = $1
            # Extract simple class name from full path
            sub(/.*[.]/, "", class_name)
          
            line_cov = $4
            branch_cov = $7
          
            # Skip classes with 0 coverage and no name
            if (line_cov == 0 && branch_cov == 0) next
            if (class_name == "") next
          
            # Add color indicators
            color_line = (line_cov < 70) ? "üî¥" : (line_cov < 90) ? "üü°" : "üü¢"
            color_branch = (branch_cov < 70) ? "üî¥" : (branch_cov < 90) ? "üü°" : "üü¢"
          
            printf "| %s | %s %.1f%% | %s %.1f%% |\n", 
              class_name, 
              color_line, line_cov, 
              color_branch, branch_cov
          }' "$CSV_REPORT")
          
          echo "table=$TABLE_CONTENT" >> $GITHUB_OUTPUT
          
          - name: Post coverage report to PR
          if: ${{ github.event_name == 'pull_request' && steps.coverage_table.outputs.table != '' }}
          uses: actions/github-script@v6
          with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const overall = ${{ steps.coverage_threshold.outputs.percent || 0 }};
            const status = overall >= 80 ? '‚úÖ' : '‚ùå';
            const table = `${{ steps.coverage_table.outputs.table }}`;
          
            const summary = `
            ## üìä Unit Test Coverage Report
          
            **Overall Coverage:** ${status} ${overall}% (Minimum: 80%)
          
            ### Class Coverage Details:
            ${table}
          
            > _üî¥ <70% | üü° 70-89% | üü¢ >90%_
            > _Generated by Jacoco Playground_
            `;
          
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });