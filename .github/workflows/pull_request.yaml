name: run tests

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development
      - 'feature/**'
      - 'bugfix/**'
      - 'task/**'

jobs:
  test:
    name: Run Unit Tests & Generate Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Grant execute permission to Gradle
        run: chmod +x ./gradlew

      - name: Run unit tests
        run: ./gradlew testDebugUnitTest

      - name: Generate coverage report
        run: ./gradlew jacocoTestReport

      - name: Upload JaCoCo HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-html-report
          path: app/build/reports/jacoco/jacocoTestReport/html

      - name: Debug Jacoco report folder
        run: |
          echo "--- Listing reports/jacoco ---"
          ls -R app/build/reports/jacoco
          echo "--- Listing XML files ---"
          find app/build/reports -type f -name '*.xml'

      - name: Check coverage threshold
        id: coverage
        working-directory: app/build/reports/jacoco/jacocoTestReport
        run: |
          REPORT=jacocoTestReport.xml
          echo "--- Debugging coverage threshold ---"
          echo "Current working directory: $(pwd)"
          echo "Checking for report file: $REPORT"
          ls -l "$REPORT" # Verify file existence and permissions right before use
          
          if [ ! -f "$REPORT" ]; then
            echo "❌ Report not found: $REPORT"
            exit 1
          fi
          
          echo "Attempting to extract MISSED lines..."
          MISSED=$(grep -oPm1 '(?<=<counter type="LINE" missed=")[^"]+' "$REPORT")
          if [ -z "$MISSED" ]; then
            echo "⚠️ Warning: MISSED lines not found or empty. Using 0."
            MISSED=0
            # Optional: Print the first few lines of the XML if MISSED is empty to help debug why it wasn't found
            # head -n 20 "$REPORT"
          fi
          echo "Extracted MISSED: '$MISSED'"
          
          echo "Attempting to extract COVERED lines..."
          COVERED=$(grep -oPm1 '(?<=<counter type="LINE" covered=")[^"]+' "$REPORT")
          if [ -z "$COVERED" ]; then
            echo "⚠️ Warning: COVERED lines not found or empty. Using 0."
            COVERED=0
          fi
          echo "Extracted COVERED: '$COVERED'"
          
          # Ensure MISSED and COVERED are treated as numbers for arithmetic
          MISSED_NUM=${MISSED:-0}
          COVERED_NUM=${COVERED:-0}
          
          echo "MISSED_NUM (for arithmetic): $MISSED_NUM"
          echo "COVERED_NUM (for arithmetic): $COVERED_NUM"
          
          TOTAL=$(( MISSED_NUM + COVERED_NUM ))
          
          # Handle division by zero if TOTAL is 0 (no lines at all)
          if [ "$TOTAL" -eq 0 ]; then
            PERCENT=0
            echo "➡️ Coverage: 0% (No lines found in report)"
          else
            PERCENT=$(( 100 * COVERED_NUM / TOTAL ))
            echo "➡️ Coverage: $PERCENT% ($COVERED_NUM covered, $MISSED_NUM missed of $TOTAL)"
          fi
          
          # Use GITHUB_OUTPUT for setting outputs (modern approach)
          echo "percent=$PERCENT" >> "$GITHUB_OUTPUT"
          
          if [ "$PERCENT" -lt 80 ]; then
            echo "❌ Test coverage is below 80% ($PERCENT%)"
            exit 1
          else
            echo "✅ Test coverage is sufficient ($PERCENT%)"
            exit 0
          fi